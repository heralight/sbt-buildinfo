sbt-liftinfo
=============

*I know this because build.sbt knows this.*

sbt-liftinfo generates Scala source from your build definitions.

fork from sbt-buildinfo

Why a fork
----------

sbt-buidinfo generate scala code, which can change at each compilation.
with sbt-liftinfo you only a property file ...

and you can it like :

```
import code.lib.PropsUtils
import net.liftweb.common._
import net.liftweb.http._
import S._
import net.liftweb.util._
import Helpers._
import scala.xml._

case object BuildInfo {
  val props = PropsUtils.getProperties("/lift-info.properties") openOrThrowException("Missing correct /lift-info.properties")

  /** The value is "Primimo". */
  val projectName = PropsUtils.getOrDie(props, "projectName")
  /** The value is "Heirko". */
  val organization = PropsUtils.getOrDie(props, "organization")
  /** The value is "0.4". */
  val version = PropsUtils.getOrDie(props, "version")
  /** The value is "2.11.2". */
  val scalaVersion = PropsUtils.getOrDie(props, "scalaVersion")
  /** The value is "0.13.5". */
  val sbtVersion = PropsUtils.getOrDie(props, "sbtVersion")
  /** The value is 3426. */
  val buildinfoBuildnumber = PropsUtils.getOrDie(props, "liftinfoBuildnumber").toInt
  /** The value is ("()" -> 1417769372396L). */
  val buildTime = PropsUtils.getOrDie(props, "buildTime")
  override val toString = "projectName: %s, organization: %s, version: %s, scalaVersion: %s, sbtVersion: %s, buildinfoBuildnumber: %s, buildTime: %s" format (projectName, organization, version, scalaVersion, sbtVersion, buildinfoBuildnumber, buildTime)

  val toMap = Map[String, Any](
    "projectName" -> projectName,
    "organization" -> organization,
    "version" -> version,
    "scalaVersion" -> scalaVersion,
    "sbtVersion" -> sbtVersion,
    "buildinfoBuildnumber" -> buildinfoBuildnumber,
    "buildTime" -> buildTime)
}
```

Latest Stable
-------------

```scala
addSbtPlugin("com.heirko" % "sbt-liftinfo" % "0.3.2")
```

For sbt 0.12, see [0.2.5](https://github.com/sbt/sbt-liftinfo/tree/0.2.5).

Usage
-----

Add the following in your `build.sbt`:

```scala
liftInfoSettings

sourceGenerators in Compile <+= liftInfo

liftInfoKeys := Seq[LiftInfoKey](name, version, scalaVersion, sbtVersion)

liftInfoPackage := "hello"
```

(__Note__: in version 0.1.2, this was `Seq[Scoped]` instead!)

Alternatively, if you are using `Build.scala`, add the plugin to your build as follows:

```scala
import sbtliftinfo.Plugin._

// ...more code here

lazy val myProject = Project(
    id = "myProjectName",
    base = file("."),
    settings = Defaults.defaultSettings ++
      liftInfoSettings ++
      Seq(
          sourceGenerators in Compile <+= liftInfo,
          liftInfoKeys := Seq[LiftInfoKey](name, version, scalaVersion, sbtVersion),
          liftInfoPackage := "hello"
      ) ++
      ...
)
```

When you reload the settings and compile, this generates the following:

```scala
package hello

/** This object was generated by sbt-liftinfo. */
case object LiftInfo {
  /** The value is "helloworld". */
  val name = "helloworld"
  /** The value is "0.1-SNAPSHOT". */
  val version = "0.1-SNAPSHOT"
  /** The value is "2.9.2". */
  val scalaVersion = "2.9.2"
  /** The value is "0.12.0". */
  val sbtVersion = "0.12.0"
}
```

Customize `liftInfoKeys` by adding whatever keys you want to have in `LiftInfo`. You can use `LiftInfoKey.map` to change the generated field name and value, add new fields with tuples, or add new fields with values computed at build-time:

```scala
liftInfoKeys ++= Seq[LiftInfoKey](
  resolvers,
  libraryDependencies in Test,
  LiftInfoKey.map(name) { case (k, v) => "project" + k.capitalize -> v.capitalize },
  "custom" -> 1234, // computed at project load time
  LiftInfoKey.action("buildTime") {
    System.currentTimeMillis
  } // re-computed each time at compile
)
```

This generates:

```scala
  /** The value is Seq("Sonatype Public: https://oss.sonatype.org/content/groups/public"). */
  val resolvers = Seq("Sonatype Public: https://oss.sonatype.org/content/groups/public")
  /** The value is Seq("org.scala-lang:scala-library:2.9.1", ...). */
  val test_libraryDependencies = Seq("org.scala-lang:scala-library:2.9.1", ...)
  /** The value is "Helloworld". */
  val projectName = "Helloworld"
  /** The value is 1234. */
  val custom = 1234
  /** The value is 1346906092160L. */
  val buildTime = 1346906092160L
```

Tasks can be added only if they do not depend on `sourceGenerators`. Otherwise, it will cause an infinite loop.

Here's how to change the generated object name:

```scala
liftInfoObject := "Info"
```

This changes the generated object name to `object Info`. Changing the object name is optional, but to avoid name clash with other jars, package name should be unique. Use `liftInfoPackage` key for this.

```scala
liftInfoPackage := "hello"
```

### build number

A build number can be generated as follows. Note that cross building against multiple Scala would each generate a new number.

```scala
liftInfoKeys += liftInfoBuildNumber
```

Eclipse support
---------------

If you use the [sbteclipse plugin](https://github.com/typesafehub/sbteclipse) to generate projects for Eclipse, you need to tell `sbteclipse` that the generated `LiftInfo.scala` is a _managed source_, i.e., a generated source file.

To do so, you can configure `sbteclipse` as follows:

```scala
EclipseKeys.createSrc := EclipseCreateSrc.Default + EclipseCreateSrc.Managed
```

This is explained in more detail in the [`sbtecliipse` documentation](https://github.com/typesafehub/sbteclipse/wiki/Using-sbteclipse).

License
-------

MIT License
