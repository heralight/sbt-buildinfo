name := "helloworld"

organization := "com.heirko"

version := "0.1"

scalaVersion := "2.10.2"

liftInfoSettings

sourceGenerators in Compile <+= liftInfo

liftInfoKeys ++= Seq[LiftInfoKey](name, organization, version, scalaVersion,
  libraryDependencies, libraryDependencies in Test)

liftInfoKeys += LiftInfoKey(resolvers)

liftInfoPackage := "hello"

homepage := Some(url("http://example.com"))

licenses := Seq("MIT License" -> url("https://github.com/sbt/sbt-liftinfo/blob/master/LICENSE"))

resolvers ++= Seq("Sonatype Public" at "https://oss.sonatype.org/content/groups/public")

TaskKey[Unit]("check") <<= (sourceManaged in Compile) map { (dir) =>
  val f = dir / "sbt-liftinfo" / ("%s.scala" format "LiftInfo")
  val lines = scala.io.Source.fromFile(f).getLines.toList
  lines match {
    case """package hello""" ::
         """""" ::
         """/** This object was generated by sbt-liftinfo. */""" ::
         """case object LiftInfo {""" ::
         """  /** The value is "helloworld". */""" ::
         """  val name = "helloworld"""" ::
         """  /** The value is "0.1". */""" ::
         """  val version = "0.1"""" ::
         """  /** The value is "2.10.2". */""" ::
         """  val scalaVersion = "2.10.2"""" ::
         """  /** The value is "0.13.1". */""" ::
         """  val sbtVersion = "0.13.1"""" ::
         """  /** The value is "com.heirko". */""" ::
         """  val organization = "com.heirko"""" ::
         """  /** The value is Seq("org.scala-lang:scala-library:2.10.2"). */""" ::
         """  val libraryDependencies = Seq("org.scala-lang:scala-library:2.10.2")""" ::
         """  /** The value is Seq("org.scala-lang:scala-library:2.10.2"). */""" ::
         """  val test_libraryDependencies = Seq("org.scala-lang:scala-library:2.10.2")""" ::
         """  /** The value is Seq("Sonatype Public: https://oss.sonatype.org/content/groups/public"). */""" ::
         """  val resolvers = Seq("Sonatype Public: https://oss.sonatype.org/content/groups/public")""" ::
         """  override val toString = "name: %s, version: %s, scalaVersion: %s, sbtVersion: %s, organization: %s, libraryDependencies: %s, test_libraryDependencies: %s, resolvers: %s" format (name, version, scalaVersion, sbtVersion, organization, libraryDependencies, test_libraryDependencies, resolvers)""" ::
         "" ::
         """  val toMap = Map[String, Any](""" ::
         """    "name" -> name,""" ::
         """    "version" -> version,""" ::
         """    "scalaVersion" -> scalaVersion,""" ::
         """    "sbtVersion" -> sbtVersion,""" ::
         """    "organization" -> organization,""" ::
         """    "libraryDependencies" -> libraryDependencies,""" ::
         """    "test_libraryDependencies" -> test_libraryDependencies,""" ::
         """    "resolvers" -> resolvers)""" ::
         """}""" :: Nil =>
    case _ => sys.error("unexpected output: \n" + lines.mkString("\n"))
  }
  ()
}
